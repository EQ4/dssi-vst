
### Generic autoconf variables

TOPSRCDIR             = @top_srcdir@
TOPOBJDIR             = .
SRCDIR                = @srcdir@
VPATH                 = @srcdir@

SUBDIRS               =
DLLS                  =
EXES                  = dssi-vst-server.exe dssi-vst-scanner.exe dssi-vst_gui.exe


### Common settings

DEFINES               =
INCLUDE_PATH          = -I/home/cannam/vst/vstsdk2.3/source/common
DLL_PATH              =
LIBRARY_PATH          = -L.
LIBRARIES             = remoteplugin


### dssi-vst-server.exe sources and settings

dssi-vst-server_exe_MODULE     = dssi-vst-server.exe
dssi-vst-server_exe_APPMODE    = gui
dssi-vst-server_exe_C_SRCS     =
dssi-vst-server_exe_CXX_SRCS   = dssi-vst-server.cpp
dssi-vst-server_exe_RC_SRCS    =
dssi-vst-server_exe_SPEC_SRCS  =
dssi-vst-server_exe_DLL_PATH   = -L$(WINE_DLL_ROOT)
dssi-vst-server_exe_DLLS       = advapi32 \
			comdlg32 \
			gdi32 \
			kernel32 \
			odbc32 \
			ole32 \
			oleaut32 \
			shell32 \
			user32 \
			winspool
dssi-vst-server_exe_LIBRARY_PATH= 
dssi-vst-server_exe_LIBRARIES  = 
dssi-vst-server_exe_DEPENDS    =

dssi-vst-server_exe_OBJS       = $(dssi-vst-server_exe_C_SRCS:.c=.o) \
			$(dssi-vst-server_exe_CXX_SRCS:.cpp=.o) \
			$(EXTRA_OBJS)


### dssi-vst_gui.exe sources and settings

dssi-vst_gui_exe_MODULE     = dssi-vst_gui.exe
dssi-vst_gui_exe_APPMODE    = gui
dssi-vst_gui_exe_C_SRCS     =
dssi-vst_gui_exe_CXX_SRCS   = dssi-vst_gui.cpp
dssi-vst_gui_exe_RC_SRCS    =
dssi-vst_gui_exe_SPEC_SRCS  =
dssi-vst_gui_exe_DLL_PATH   = -L$(WINE_DLL_ROOT)
dssi-vst_gui_exe_DLLS       = advapi32 \
			comdlg32 \
			gdi32 \
			kernel32 \
			odbc32 \
			ole32 \
			oleaut32 \
			shell32 \
			user32 \
			winspool
dssi-vst_gui_exe_LIBRARY_PATH= 
dssi-vst_gui_exe_LIBRARIES  = lo
dssi-vst_gui_exe_DEPENDS    =

dssi-vst_gui_exe_OBJS       = $(dssi-vst_gui_exe_C_SRCS:.c=.o) \
			$(dssi-vst_gui_exe_CXX_SRCS:.cpp=.o) \
			$(EXTRA_OBJS)


### dssi-vst-scanner.exe sources and settings

dssi-vst-scanner_exe_MODULE     = dssi-vst-scanner.exe
dssi-vst-scanner_exe_APPMODE    = gui
dssi-vst-scanner_exe_C_SRCS     =
dssi-vst-scanner_exe_CXX_SRCS   = dssi-vst-scanner.cpp
dssi-vst-scanner_exe_RC_SRCS    =
dssi-vst-scanner_exe_SPEC_SRCS  =
dssi-vst-scanner_exe_DLL_PATH   = -L$(WINE_DLL_ROOT)
dssi-vst-scanner_exe_DLLS       = advapi32 \
			comdlg32 \
			gdi32 \
			kernel32 \
			odbc32 \
			ole32 \
			oleaut32 \
			shell32 \
			user32 \
			winspool
dssi-vst-scanner_exe_LIBRARY_PATH= 
dssi-vst-scanner_exe_LIBRARIES  = 
dssi-vst-scanner_exe_DEPENDS    =

dssi-vst-scanner_exe_OBJS       = $(dssi-vst-scanner_exe_C_SRCS:.c=.o) \
			$(dssi-vst-scanner_exe_CXX_SRCS:.cpp=.o) \
			$(EXTRA_OBJS)



### Global source lists

C_SRCS                = $(dssi-vst-server_exe_C_SRCS) $(dssi-vst-scanner_exe_C_SRCS) $(dssi-vst_gui_exe_C_SRCS)
CXX_SRCS              = $(dssi-vst-server_exe_CXX_SRCS) $(dssi-vst-scanner_exe_CXX_SRCS) $(dssi-vst_gui_exe_CXX_SRCS)
RC_SRCS               = $(dssi-vst-server_exe_RC_SRCS) $(dssi-vst-scanner_exe_RC_SRCS) $(dssi-vst_gui_exe_RC_SRCS)
SPEC_SRCS             = $(dssi-vst-server_exe_SPEC_SRCS) $(dssi-vst-scanner_exe_SPEC_SRCS) $(dssi-vst_gui_exe_SPEC_SRCS)



### Generic autoconf targets

all: wineapploader $(SUBDIRS) $(DLLS:%=%.so) $(EXES:%=%.so) vstsynth libremoteplugin.a dssi-vst.so

wineapploader: wineapploader.in
	sed -e 's,@bindir\@,$(bindir),g' -e 's,@winelibdir\@,.,g' $(SRCDIR)/wineapploader.in >$@ || $(RM) $@

@MAKE_RULES@

install::
	_list="$(SUBDIRS)"; for i in $$_list; do (cd $$i; $(MAKE) install) || exit 1; done
	_list="$(EXES:%.exe=%)"; for i in $$_list; do $(INSTALL_SCRIPT) $$i $(bindir); done
	_list="$(EXES:%=%.so) $(DLLS:%=%.so)"; for i in $$_list; do $(INSTALL_PROGRAM) $$i $(dlldir); done

uninstall::
	_list="$(SUBDIRS)"; for i in $$_list; do (cd $$i; $(MAKE) uninstall) || exit 1; done
	_list="$(EXES:%.exe=%)"; for i in $$_list; do $(RM) $(bindir)/$$i;done
	_list="$(EXES:%=%.so) $(DLLS:%=%.so)"; for i in $$_list; do $(RM) $(dlldir)/$$i;done

clean::
	$(RM) wineapploader

distclean: clean
	$(RM) config.* configure.lineno Make.rules
	$(RM) -r autom4te.cache
	find . -name Makefile -exec $(RM) {} \;

### Target specific build rules

$(dssi-vst-server_exe_MODULE).dbg.c: $(dssi-vst-server_exe_C_SRCS) $(dssi-vst-server_exe_CXX_SRCS)
	$(LDPATH) $(WINEBUILD) -o $@ --debug -C$(SRCDIR) $(dssi-vst-server_exe_C_SRCS) $(dssi-vst-server_exe_CXX_SRCS)

$(dssi-vst-server_exe_MODULE).spec.c: $(dssi-vst-server_exe_SPEC_SRCS) $(dssi-vst-server_exe_RC_SRCS:.rc=.res) $(dssi-vst-server_exe_OBJS)
	$(LDPATH) $(WINEBUILD) -fPIC -o $@ --exe $(dssi-vst-server_exe_MODULE) -m$(dssi-vst-server_exe_APPMODE) $(dssi-vst-server_exe_SPEC_SRCS:%=--spec %) $(dssi-vst-server_exe_RC_SRCS:%.rc=%.res) $(dssi-vst-server_exe_OBJS) $(dssi-vst-server_exe_DLL_PATH) $(WINE_DLL_PATH) $(GLOBAL_DLL_PATH) $(dssi-vst-server_exe_DLLS:%=-l%) $(GLOBAL_DLLS:%=-l%)

$(dssi-vst-server_exe_MODULE).so: $(dssi-vst-server_exe_MODULE).dbg.o $(dssi-vst-server_exe_MODULE).spec.o $(dssi-vst-server_exe_OBJS) $(dssi-vst-server_exe_DEPENDS)
	$(LDXXSHARED) $(LDDLLFLAGS) -o $@ $(dssi-vst-server_exe_OBJS) $(dssi-vst-server_exe_MODULE).dbg.o $(dssi-vst-server_exe_MODULE).spec.o $(dssi-vst-server_exe_LIBRARY_PATH) $(ALL_LIBRARY_PATH) $(dssi-vst-server_exe_LIBRARIES:%=-l%) $(ALL_LIBRARIES) $(LIBS)

### Target specific build rules

$(dssi-vst_gui_exe_MODULE).dbg.c: $(dssi-vst_gui_exe_C_SRCS) $(dssi-vst_gui_exe_CXX_SRCS)
	$(LDPATH) $(WINEBUILD) -o $@ --debug -C$(SRCDIR) $(dssi-vst_gui_exe_C_SRCS) $(dssi-vst_gui_exe_CXX_SRCS)

$(dssi-vst_gui_exe_MODULE).spec.c: $(dssi-vst_gui_exe_SPEC_SRCS) $(dssi-vst_gui_exe_RC_SRCS:.rc=.res) $(dssi-vst_gui_exe_OBJS)
	$(LDPATH) $(WINEBUILD) -fPIC -o $@ --exe $(dssi-vst_gui_exe_MODULE) -m$(dssi-vst_gui_exe_APPMODE) $(dssi-vst_gui_exe_SPEC_SRCS:%=--spec %) $(dssi-vst_gui_exe_RC_SRCS:%.rc=%.res) $(dssi-vst_gui_exe_OBJS) $(dssi-vst_gui_exe_DLL_PATH) $(WINE_DLL_PATH) $(GLOBAL_DLL_PATH) $(dssi-vst_gui_exe_DLLS:%=-l%) $(GLOBAL_DLLS:%=-l%)

$(dssi-vst_gui_exe_MODULE).so: $(dssi-vst_gui_exe_MODULE).dbg.o $(dssi-vst_gui_exe_MODULE).spec.o $(dssi-vst_gui_exe_OBJS) $(dssi-vst_gui_exe_DEPENDS)
	$(LDXXSHARED) $(LDDLLFLAGS) -o $@ $(dssi-vst_gui_exe_OBJS) $(dssi-vst_gui_exe_MODULE).dbg.o $(dssi-vst_gui_exe_MODULE).spec.o $(dssi-vst_gui_exe_LIBRARY_PATH) $(ALL_LIBRARY_PATH) $(dssi-vst_gui_exe_LIBRARIES:%=-l%) $(ALL_LIBRARIES) $(LIBS)

### Target specific build rules

$(dssi-vst-scanner_exe_MODULE).dbg.c: $(dssi-vst-scanner_exe_C_SRCS) $(dssi-vst-scanner_exe_CXX_SRCS)
	$(LDPATH) $(WINEBUILD) -o $@ --debug -C$(SRCDIR) $(dssi-vst-scanner_exe_C_SRCS) $(dssi-vst-scanner_exe_CXX_SRCS)

$(dssi-vst-scanner_exe_MODULE).spec.c: $(dssi-vst-scanner_exe_SPEC_SRCS) $(dssi-vst-scanner_exe_RC_SRCS:.rc=.res) $(dssi-vst-scanner_exe_OBJS)
	$(LDPATH) $(WINEBUILD) -fPIC -o $@ --exe $(dssi-vst-scanner_exe_MODULE) -m$(dssi-vst-scanner_exe_APPMODE) $(dssi-vst-scanner_exe_SPEC_SRCS:%=--spec %) $(dssi-vst-scanner_exe_RC_SRCS:%.rc=%.res) $(dssi-vst-scanner_exe_OBJS) $(dssi-vst-scanner_exe_DLL_PATH) $(WINE_DLL_PATH) $(GLOBAL_DLL_PATH) $(dssi-vst-scanner_exe_DLLS:%=-l%) $(GLOBAL_DLLS:%=-l%)

$(dssi-vst-scanner_exe_MODULE).so: $(dssi-vst-scanner_exe_MODULE).dbg.o $(dssi-vst-scanner_exe_MODULE).spec.o $(dssi-vst-scanner_exe_OBJS) $(dssi-vst-scanner_exe_DEPENDS)
	$(LDXXSHARED) $(LDDLLFLAGS) -o $@ $(dssi-vst-scanner_exe_OBJS) $(dssi-vst-scanner_exe_MODULE).dbg.o $(dssi-vst-scanner_exe_MODULE).spec.o $(dssi-vst-scanner_exe_LIBRARY_PATH) $(ALL_LIBRARY_PATH) $(dssi-vst-scanner_exe_LIBRARIES:%=-l%) $(ALL_LIBRARIES) $(LIBS)


### Client application
vstsynth:	vstsynth.cpp remoteplugin.h remotepluginclient.h remotevstclient.o libremoteplugin.a
		g++ -g3 -I/usr/local/include -L/usr/local/lib -Wall vstsynth.cpp remotevstclient.o -o vstsynth -L. -lremoteplugin -ljack -lasound

libremoteplugin.a:	remotepluginclient.o remotepluginserver.o rdwrops.o
	ar r $@ $^

remotepluginclient.o:	remotepluginclient.cpp remotepluginclient.h remoteplugin.h
	g++ -g3 -Wall remotepluginclient.cpp -c

remotevstclient.o:	remotevstclient.cpp remotevstclient.h remotepluginclient.h remoteplugin.h
	g++ -g3 -Wall remotevstclient.cpp -c

remotepluginserver.o:	remotepluginserver.cpp remotepluginserver.h remoteplugin.h
	g++ -g3 -Wall remotepluginserver.cpp -c

dssi-vst-server.o:	remoteplugin.h remotepluginserver.h libremoteplugin.a
dssi-vst_gui.o:	remoteplugin.h remotepluginserver.h libremoteplugin.a
dssi-vst-scanner.o:	remoteplugin.h remotepluginserver.h libremoteplugin.a

dssi-vst.so:	remoteplugin.h remotepluginclient.h libremoteplugin.a dssi-vst.cpp remotevstclient.o
	g++ -shared -Wl,-Bsymbolic -g3 -Wall -o dssi-vst.so dssi-vst.cpp remotevstclient.o  -L. -lremoteplugin
