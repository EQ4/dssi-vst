Только в dssi-vst/: .cproject
diff -ru distr/dssi-vst-0.8/dssi-vst.cpp dssi-vst/dssi-vst.cpp
--- distr/dssi-vst-0.8/dssi-vst.cpp	2008-12-12 16:34:31.000000000 +0400
+++ dssi-vst/dssi-vst.cpp	2009-03-18 23:58:34.831997393 +0400
@@ -79,6 +79,13 @@
 
     RemotePluginClient        *m_plugin;
     bool                       m_ok;
+    
+    //Andrew Deryabin: VST chunks support
+    
+    char *m_chunkdata;
+    
+    friend class DSSIVSTPlugin;
+    //Andrew Deryabin: VST chunks support: end code
 };
 
 class DSSIVSTPlugin
@@ -120,6 +127,9 @@
 
     static char *configure(LADSPA_Handle instance, const char *key,
 			   const char *value);
+    
+    static int setCustomData (LADSPA_Handle Instance, void *Data, unsigned long DataLength);
+    static int getCustomData (LADSPA_Handle Instance, void **Data, unsigned long *DataLength);
 
 private:
     typedef std::pair<std::string, DSSI_Descriptor *> PluginPair;
@@ -144,14 +154,16 @@
     m_programs(0),
     m_programCount(0),
     m_pendingProgram(false),
-    m_plugin(0),
-    m_ok(false)
+    m_plugin(0),    
+    m_ok(false),
+    m_chunkdata(0)
 {
     std::cerr << "DSSIVSTPluginInstance::DSSIVSTPluginInstance(" << dllName << ")" << std::endl;
 
     try {
 	m_plugin = new RemoteVSTClient(dllName);
-
+	
+		
 	m_controlPortCount = m_plugin->getParameterCount();
 	m_controlPorts = new LADSPA_Data*[m_controlPortCount];
 	m_controlPortsSaved = new LADSPA_Data[m_controlPortCount];
@@ -226,6 +238,8 @@
     }
 
     delete m_plugin;
+    
+    delete m_chunkdata;
 
     if (m_alsaDecoder) {
 	snd_midi_event_free(m_alsaDecoder);
@@ -252,7 +266,7 @@
 	} catch (RemotePluginClosedException) {
 	    m_ok = false;
 	}
-    }
+    } 
 }
 
 void
@@ -314,6 +328,7 @@
 void
 DSSIVSTPluginInstance::selectProgram(unsigned long bank, unsigned long program)
 {
+    
     if (bank != 0 || program >= m_programCount) return;
 
     try {
@@ -324,6 +339,8 @@
 	    if (!m_controlPorts[i]) continue;
 	    *m_controlPorts[i] = m_controlPortsSaved[i];
 	}
+	
+        
 
     } catch (RemotePluginClosedException) {
 	m_ok = false;
@@ -573,6 +590,11 @@
 	descriptor->get_program = DSSIVSTPlugin::get_program;
 	descriptor->select_program = DSSIVSTPlugin::select_program;
 	descriptor->get_midi_controller_for_port = 0;
+	
+	//Andrew Deryabin: VST chunks support
+	descriptor->setCustomData = DSSIVSTPlugin::setCustomData;
+	descriptor->getCustomData = DSSIVSTPlugin::getCustomData;
+	//Andrew Deryabin: VST chunks support: end code
 
 	if (rec.isSynth) {
 	    descriptor->run_synth = DSSIVSTPlugin::run_synth;
@@ -742,3 +764,41 @@
     return _plugin->queryDescriptor(index);
 }
 
+//Andrew Deryabin: VST chunks support
+
+int DSSIVSTPlugin::setCustomData(LADSPA_Handle Instance, void *Data, unsigned long  DataLength)
+{
+    DSSIVSTPluginInstance *instance = ((DSSIVSTPluginInstance *)Instance);
+    if(DataLength == 0 || Data == 0)
+        return 0;
+    std::vector<char> chunk;
+    for(unsigned long i = 0; i < DataLength; i++)
+        chunk.push_back(((char *)Data) [i]);
+    instance->m_plugin->setVSTChunk(chunk);
+    return 1;
+}
+
+int DSSIVSTPlugin::getCustomData(LADSPA_Handle Instance, void **Data, unsigned long  *DataLength)
+{
+    DSSIVSTPluginInstance *instance = ((DSSIVSTPluginInstance *)Instance);
+    std::vector<char> chunk = instance->m_plugin->getVSTChunk();
+    unsigned long chunksize = chunk.size();
+    instance->m_chunkdata = new char [chunksize];
+    if(instance->m_chunkdata)
+    {
+        std::vector<char>::pointer ptr = &chunk [0];
+        memcpy(instance->m_chunkdata, ptr, chunksize);
+        *Data = instance->m_chunkdata;
+        *DataLength = chunksize;
+        return 1;
+    }
+    *Data = 0;
+    *DataLength = 0;
+    return 0;
+    
+}
+
+//Andrew Deryabin: VST chunks support: end code
+
+
+
diff -ru distr/dssi-vst-0.8/dssi-vst_gui.cpp dssi-vst/dssi-vst_gui.cpp
--- distr/dssi-vst-0.8/dssi-vst_gui.cpp	2008-12-12 16:34:31.000000000 +0400
+++ dssi-vst/dssi-vst_gui.cpp	2009-02-25 18:32:38.000000000 +0400
@@ -133,7 +133,8 @@
 		int argc, void *data, void *user_data)
 {
     static int count = 0;
-    cerr << "dssi-vst_gui: control_handler " << count++ << endl;
+    count++;
+    //cerr << "dssi-vst_gui: control_handler " << count++ << endl;
     return 0;
 }
 
Только в dssi-vst/: dssi-vst-scanner.exe
diff -ru distr/dssi-vst-0.8/dssi-vst-server.cpp dssi-vst/dssi-vst-server.cpp
--- distr/dssi-vst-0.8/dssi-vst-server.cpp	2008-12-12 16:34:31.000000000 +0400
+++ dssi-vst/dssi-vst-server.cpp	2009-03-03 21:26:28.550119886 +0400
@@ -104,6 +104,11 @@
 
     virtual void         showGUI(std::string);
     virtual void         hideGUI();
+    
+    //Deryabin Andrew: vst chunks support
+    virtual std::vector<char> getVSTChunk();
+    virtual bool setVSTChunk(std::vector<char>);
+    //Deryabin Andrew: vst chunks support: end code
 
     virtual void process(float **inputs, float **outputs);
 
@@ -576,6 +581,46 @@
     guiVisible = false;
 }
 
+
+//Deryabin Andrew: vst chunks support
+std::vector<char> RemoteVSTServer::getVSTChunk()
+{
+    cerr << "dssi-vst-server: Getting vst chunk from plugin.." << endl;
+    char * chunkraw = 0;
+    int len = m_plugin->dispatcher(m_plugin, 23, 0, 0, (void **)&chunkraw, 0);
+    std::vector<char> chunk;
+    for(int i = 0; i < len; i++)
+    {
+        chunk.push_back(chunkraw [i]);
+    }
+    
+    if(len > 0)
+    {
+        cerr << "Got " << len << " bytes chunk." << endl;
+    }
+    
+    return chunk;
+    
+}
+
+bool RemoteVSTServer::setVSTChunk(std::vector<char> chunk)
+{
+    cerr << "dssi-vst-server: Sending vst chunk to plugin. Size=" << chunk.size() << endl;
+    std::vector<char>::pointer ptr = &chunk [0];    
+    
+    pthread_mutex_lock(&mutex);
+
+    m_plugin->dispatcher(m_plugin, 24, 0, chunk.size(), (void *)ptr, 0);
+
+    pthread_mutex_unlock(&mutex);
+    
+    return true;
+}
+
+//Deryabin Andrew: vst chunks support: end code
+
+
+
 void
 RemoteVSTServer::startEdit()
 {
Только в dssi-vst/: dssi-vst-server.exe
diff -ru distr/dssi-vst-0.8/Makefile dssi-vst/Makefile
--- distr/dssi-vst-0.8/Makefile	2008-12-12 16:34:31.000000000 +0400
+++ dssi-vst/Makefile	2009-03-03 19:43:08.991123851 +0400
@@ -1,10 +1,10 @@
 
-DSSIDIR		= /usr/local/lib/dssi
-LADSPADIR	= /usr/local/lib/ladspa
-BINDIR		= /usr/local/bin
+DSSIDIR		= /usr/lib/dssi
+LADSPADIR	= /usr/lib/ladspa
+BINDIR		= /usr/bin
 
 # To compile with the VeSTige compatibility header:
-CXXFLAGS	= -Ivestige -Wall -fPIC
+CXXFLAGS	= -Ivestige -Wall -fPIC  -O2 -g -ffast-math
 
 # To compile with the official VST SDK v2.4r2:
 #CXXFLAGS	= -I./vstsdk2.4/pluginterfaces/vst2.x -Wall -fPIC
@@ -53,7 +53,7 @@
 		rm -f $(TARGETS) dssi-vst-scanner dssi-vst-server *~ *.bak
 
 %.exe.so:	%.cpp libremoteplugin.w32.a $(HEADERS)
-		wineg++ -m32 $(CXXFLAGS) $< -o $* $(LDFLAGS) -L. -lremoteplugin.w32 -lpthread
+		wineg++ -m32 $(CXXFLAGS) $< -o $* $(LDFLAGS) -L. -lremoteplugin.w32 -lpthread -lz
 
 libremoteplugin.a:	remotepluginclient.o remotepluginserver.o rdwrops.o paths.o
 		ar r $@ $^
@@ -68,11 +68,11 @@
 		g++ $(CXXFLAGS) $< -c
 
 dssi-vst.so:	dssi-vst.cpp libremoteplugin.a remotevstclient.o $(HEADERS)
-		g++ -shared -Wl,-Bsymbolic -g3 $(CXXFLAGS) -o dssi-vst.so dssi-vst.cpp remotevstclient.o $(LDFLAGS) -L. -lremoteplugin -lasound
+		g++ -shared -Wl,-Bsymbolic -g3 $(CXXFLAGS) -o dssi-vst.so dssi-vst.cpp remotevstclient.o $(LDFLAGS) -L. -lremoteplugin -lasound -lz
 
 vsthost:	vsthost.cpp libremoteplugin.a remotevstclient.o $(HEADERS)
-		g++ $(CXXFLAGS) vsthost.cpp remotevstclient.o -o vsthost $(LDFLAGS) -L. -lremoteplugin -ljack -lasound
+		g++ $(CXXFLAGS) vsthost.cpp remotevstclient.o -o vsthost $(LDFLAGS) -L. -lremoteplugin -ljack -lasound -lz
 
 dssi-vst_gui:	dssi-vst_gui.cpp rdwrops.h
-		g++ $(CXXFLAGS) dssi-vst_gui.cpp rdwrops.o -o dssi-vst_gui $(LDFLAGS) -llo
+		g++ $(CXXFLAGS) dssi-vst_gui.cpp rdwrops.o -o dssi-vst_gui $(LDFLAGS) -llo -lz
 
Только в dssi-vst/: .project
diff -ru distr/dssi-vst-0.8/rdwrops.cpp dssi-vst/rdwrops.cpp
--- distr/dssi-vst-0.8/rdwrops.cpp	2008-12-12 16:34:31.000000000 +0400
+++ dssi-vst/rdwrops.cpp	2009-02-25 17:26:44.000000000 +0400
@@ -11,6 +11,7 @@
 
 #include <errno.h>
 #include <unistd.h>
+#include <zlib.h>
 
 //#define DEBUG_RDWR 1
 
@@ -157,3 +158,87 @@
     return buf;
 }
 
+//Deryabin Andrew: vst chunks support
+
+extern void
+rdwr_writeRaw(int fd, std::vector<char> rawdata, const char *file, int line)
+{    
+    unsigned long complen = compressBound(rawdata.size());
+    char *compressed = new char [complen];
+    if(!compressed)
+    {
+        fprintf(stderr, "Failed to allocate %lu bytes of memory at %s:%d\n", complen, file, line);
+        throw RemotePluginClosedException();
+    }
+    
+    std::vector<char>::pointer ptr = &rawdata [0];
+    
+    if(compress2((Bytef *)compressed, &complen, (Bytef *)ptr, rawdata.size(), 9) != Z_OK)
+    {
+        delete compressed;
+        fprintf(stderr, "Failed to compress source buffer at %s:%d\n", file, line);
+        throw RemotePluginClosedException();        
+    }   
+    
+    fprintf(stderr, "compressed source buffer. size=%d bytes\n", complen);
+        
+    
+    int len = complen;
+    rdwr_tryWrite(fd, &len, sizeof(int), file, line);
+    len = rawdata.size();
+    rdwr_tryWrite(fd, &len, sizeof(int), file, line);    
+    rdwr_tryWrite(fd, compressed, complen, file, line);
+    
+    delete [] compressed;
+}
+
+
+extern std::vector<char>
+rdwr_readRaw(int fd, const char *file, int line)
+{
+    int complen, len;
+    static char *rawbuf = 0;
+    static int bufLen = 0;
+    rdwr_tryRead(fd, &complen, sizeof(int), file, line);
+    rdwr_tryRead(fd, &len, sizeof(int), file, line);
+    if (complen > bufLen) {
+    delete rawbuf;
+    rawbuf = new char[complen];
+    bufLen = complen;
+    }
+    rdwr_tryRead(fd, rawbuf, complen, file, line);
+    
+    char *uncompressed = new char [len];
+    
+    if(!uncompressed)
+    {
+        fprintf(stderr, "Failed to allocate %d bytes of memory at %s:%d\n", len, file, line);
+        throw RemotePluginClosedException();
+    }
+    
+    unsigned long destlen = len;
+    
+    if(uncompress((Bytef *)uncompressed, &destlen, (Bytef *)rawbuf, complen) != Z_OK)
+    {
+        delete uncompressed;
+        fprintf(stderr, "Failed to uncompress source buffer at %s:%d\n", file, line);
+        throw RemotePluginClosedException();   
+        
+    }
+    
+    fprintf(stderr, "uncompressed source buffer. size=%d bytes, complen=%d\n", destlen, complen);
+    
+    
+    std::vector<char> rawout;
+    for(int i = 0; i < destlen; i++)
+    {
+        rawout.push_back(uncompressed [i]);
+    }
+    
+    delete uncompressed;
+    
+    return rawout;
+}
+
+//Deryabin Andrew: vst chunks support: end code
+
diff -ru distr/dssi-vst-0.8/rdwrops.h dssi-vst/rdwrops.h
--- distr/dssi-vst-0.8/rdwrops.h	2008-12-12 16:34:31.000000000 +0400
+++ dssi-vst/rdwrops.h	2009-02-25 16:26:05.000000000 +0400
@@ -8,6 +8,7 @@
 #ifndef _RD_WR_OPS_H_
 
 #include <string>
+#include <vector>
 #include "remoteplugin.h"
 
 extern void rdwr_tryRead(int fd, void *buf, size_t count, const char *file, int line);
@@ -21,6 +22,14 @@
 extern float rdwr_readFloat(int fd, const char *file, int line);
 extern unsigned char *rdwr_readMIDIData(int fd, int **frameoffsets, int &events, const char *file, int line);
 
+//Deryabin Andrew: vst chunks support
+
+extern void rdwr_writeRaw(int fd, std::vector<char>, const char *file, int line);
+extern std::vector<char> rdwr_readRaw(int fd, const char *file, int line);
+
+//Deryabin Andrew: vst chunks support: end code
+
+
 #define tryRead(a, b, c) rdwr_tryRead(a, b, c, __FILE__, __LINE__)
 #define tryWrite(a, b, c) rdwr_tryWrite(a, b, c, __FILE__, __LINE__)
 #define writeOpcode(a, b) rdwr_writeOpcode(a, b, __FILE__, __LINE__)
@@ -32,4 +41,11 @@
 #define readFloat(a) rdwr_readFloat(a, __FILE__, __LINE__)
 #define readMIDIData(a, b, c) rdwr_readMIDIData(a, b, c, __FILE__, __LINE__)
 
+//Deryabin Andrew: chunks support
+
+#define writeRaw(a, b) rdwr_writeRaw(a, b, __FILE__, __LINE__)
+#define readRaw(a) rdwr_readRaw(a, __FILE__, __LINE__)
+
+//Deryabin Andrew: vst chunks support: end code
+
 #endif
Только в dssi-vst/: Release
diff -ru distr/dssi-vst-0.8/remotepluginclient.cpp dssi-vst/remotepluginclient.cpp
--- distr/dssi-vst-0.8/remotepluginclient.cpp	2008-12-12 16:34:31.000000000 +0400
+++ dssi-vst/remotepluginclient.cpp	2009-03-03 19:42:20.076124841 +0400
@@ -219,6 +219,7 @@
     return id;
 }
 
+
 void
 RemotePluginClient::sizeShm()
 {
@@ -491,3 +492,27 @@
     writeOpcode(m_controlRequestFd, RemotePluginHideGUI);
 }
 
+//Deryabin Andrew: vst chunks support
+
+std::vector<char> RemotePluginClient::getVSTChunk()
+{
+    std::cerr << "RemotePluginClient::getChunk: getting vst chunk.." << std::endl;
+    writeOpcode(m_controlRequestFd, RemotePluginGetVSTChunk);
+    std::vector<char> chunk = readRaw(m_controlResponseFd);
+    std::cerr << "RemotePluginClient::getChunk: got vst chunk, size=" << chunk.size() << std::endl;
+    return chunk;
+    
+}
+
+void RemotePluginClient::setVSTChunk(std::vector<char> chunk)
+{
+    std::cerr << "RemotePluginClient::setChunk: writing vst chunk.." << std::endl;
+        
+    std::cerr << "RemotePluginClient::setChunk: read vst chunk, size=" << chunk.size() << std::endl;
+    
+    writeOpcode(m_controlRequestFd, RemotePluginSetVSTChunk);
+    writeRaw(m_controlRequestFd, chunk);
+}
+
+//Deryabin Andrew: vst chunks support: end code
+
diff -ru distr/dssi-vst-0.8/remotepluginclient.h dssi-vst/remotepluginclient.h
--- distr/dssi-vst-0.8/remotepluginclient.h	2008-12-12 16:34:31.000000000 +0400
+++ dssi-vst/remotepluginclient.h	2009-02-25 12:56:39.000000000 +0400
@@ -61,6 +61,14 @@
 
     void         showGUI(std::string guiData);
     void         hideGUI();
+    
+    //Deryabin Andrew: vst chunks support
+    
+    std::vector<char>         getVSTChunk();
+    void                setVSTChunk(std::vector<char> chunk);
+    
+    
+    //Deryabin Andrew: vst chunks support: end code
 
 protected:
     RemotePluginClient();
diff -ru distr/dssi-vst-0.8/remoteplugin.h dssi-vst/remoteplugin.h
--- distr/dssi-vst-0.8/remoteplugin.h	2008-12-12 16:34:31.000000000 +0400
+++ dssi-vst/remoteplugin.h	2009-02-25 13:31:26.000000000 +0400
@@ -54,6 +54,11 @@
     RemotePluginShowGUI = 700,
     RemotePluginHideGUI,
 
+//Deryabin Andrew: vst chunks support
+    RemotePluginGetVSTChunk = 800,
+    RemotePluginSetVSTChunk,
+//Deryabin Andrew: vst chunks support: end code
+
     RemotePluginNoOpcode = 9999
 
 };
diff -ru distr/dssi-vst-0.8/remotepluginserver.cpp dssi-vst/remotepluginserver.cpp
--- distr/dssi-vst-0.8/remotepluginserver.cpp	2008-12-12 16:34:31.000000000 +0400
+++ dssi-vst/remotepluginserver.cpp	2009-03-04 20:13:32.454384537 +0400
@@ -300,7 +300,7 @@
 	int *frameoffsets = 0;
 	unsigned char *data = readMIDIData(m_processFd, &frameoffsets, events);
 	if (events && data && frameoffsets) {
-//    std::cerr << "RemotePluginServer::sendMIDIData(" << events << ")" << std::endl;
+    //std::cerr << "RemotePluginServer::sendMIDIData(" << events << ")" << std::endl;
 
 	    sendMIDIData(data, frameoffsets, events);
 	}
@@ -443,6 +443,25 @@
 	hideGUI();
 	break;
     }
+    
+    //Deryabin Andrew: vst chunks support
+    
+    case RemotePluginGetVSTChunk:
+    {
+        
+        std::vector<char> chunk = getVSTChunk();
+        writeRaw(m_controlResponseFd, chunk);
+        break;
+    }
+    
+    case RemotePluginSetVSTChunk:
+    {
+        std::vector<char> chunk = readRaw(m_controlRequestFd);
+        setVSTChunk(chunk);
+        break;
+    }
+    
+    //Deryabin Andrew: vst chunks support: end code
 
     case RemotePluginNoOpcode:
 	break;
diff -ru distr/dssi-vst-0.8/remotepluginserver.h dssi-vst/remotepluginserver.h
--- distr/dssi-vst-0.8/remotepluginserver.h	2008-12-12 16:34:31.000000000 +0400
+++ dssi-vst/remotepluginserver.h	2009-02-25 13:18:42.000000000 +0400
@@ -10,6 +10,7 @@
 
 #include "remoteplugin.h"
 #include <string>
+#include <vector>
 
 class RemotePluginServer
 {
@@ -56,7 +57,12 @@
 
     virtual void         showGUI(std::string guiData) { } 
     virtual void         hideGUI() { }
-
+    
+    //Deryabin Andrew: vst chunks support
+    virtual std::vector<char> getVSTChunk() = 0;
+    virtual bool setVSTChunk(std::vector<char>) = 0;
+    //Deryabin Andrew: vst chunks support: end code
+    
     void dispatch(int timeout = -1); // may throw RemotePluginClosedException
     void dispatchControl(int timeout = -1); // may throw RemotePluginClosedException
     void dispatchProcess(int timeout = -1); // may throw RemotePluginClosedException
